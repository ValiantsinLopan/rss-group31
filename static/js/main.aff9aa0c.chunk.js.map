{"version":3,"sources":["screens/main.js","components/Header.js","screens/architects.js","serviceWorker.js","index.js"],"names":["Main","classes","this","props","react_default","a","createElement","Paper_default","className","container","Link","to","link","Button_default","variant","color","size","Component","withStyles","textAlign","textDecoration","Header","AppBar_default","Architects","components_Header","Typography_default","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","basename","process","Switch","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAMMA,mLACK,IACCC,EAAYC,KAAKC,MAAjBF,QACR,OACEG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAOG,UAAWP,EAAQQ,WACxBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,GAAG,cACHH,UAAWP,EAAQW,MAEnBR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CACEG,UAAU,aACVM,QAAQ,WACRC,MAAM,UACNC,KAAK,SAJP,oDATSC,aAgCJC,uBATA,CACbT,UAAW,CACTU,UAAW,UAEbP,KAAM,CACJQ,eAAgB,SAILF,CAAmBlB,qCClC5BqB,mLAEF,OACEjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,aAHeY,aAYNC,uBAJA,GAIAA,CAAmBG,GCInBE,mLAbX,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,uCANeY,aCOLS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAeC,SAAUC,gBACvB/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxC,IACjCI,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOE,KAAK,cAAcC,UAAWjB,MAGzCkB,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aff9aa0c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass Main extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <Paper className={classes.container}>\n        <Link\n          to=\"/architects\"\n          className={classes.link}\n        >\n          <Button\n            className=\"playButton\"\n            variant=\"outlined\"\n            color=\"primary\"\n            size=\"large\"\n          >\n            Learn more about Belarusian architects!\n          </Button>\n        </Link>\n      </Paper>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    textAlign: 'center',\n  },\n  link: {\n    textDecoration: 'none',\n  },\n};\n\nexport default withStyles(styles)(Main);\n","import React, { Component } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport { withStyles } from '@material-ui/core/styles';\n\nclass Header extends Component {\n  render() {\n    return (\n      <AppBar />\n    );\n  }\n}\n\nconst styles = {\n\n};\n\nexport default withStyles(styles)(Header);\n","import React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Header from '../components/Header';\n\nclass Architects extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Paper>\n          <Typography>\n            Belarusian architects\n          </Typography>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default Architects;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './index.css';\nimport Main from './screens/main';\nimport Architects from './screens/architects';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path=\"/\" component={Main} />\n      <Route path=\"/architects\" component={Architects} />\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}